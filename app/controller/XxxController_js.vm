/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
#set ( $keyAttribs = "" )
#set ( $keyParams = [] )
#foreach ( $key in $entity.keyAttributes )
#set ( $val = $keyParams.add("let $key.name = req.params.${fn.uncapitalize($key.name)};") )
#if ( $foreach.count > 1 )
#set ( $keyAttribs = $keyAttribs + ", " )
#end
#set ( $keyAttribs = $keyAttribs + $key.name )
#end

// Load $entity Data Access Object
const ${entity}Dao = require('../dao/${uncapitalizedEntityName}Dao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load $entity entity
const $entity = require('../model/$uncapitalizedEntityName');

/**
 * $entity Controller
 */
module.exports = class ${entity}Controller {

    constructor() {
        this.${uncapitalizedEntityName}Dao = new ${entity}Dao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @params req, res
     * @return entity
     */
    findById(req, res) {
#foreach ( $keyParam in $keyParams )
 		$keyParam
#end
        this.${uncapitalizedEntityName}Dao.findById(${keyAttribs})
            .then(this.common.requestSuccess(res))
            .catch(this.common.findError(res));
    };

    /**
     * Finds all entities.
     * @return all entities
     */
    findAll(res) {
        this.${uncapitalizedEntityName}Dao.findAll()
            .then(this.common.requestSuccess(res))
            .catch(this.common.findError(res));
    };

    /**
     * Counts all the records present in the database
     * @return count
     */
    countAll(res) {

        this.${uncapitalizedEntityName}Dao.countAll()
            .then(this.common.requestSuccess(res))
            .catch(this.common.serverError(res));
    };

    /**
     * Updates the given entity in the database
     * @params req, res
     * @return true if the entity has been updated, false if not found and not updated
     */
    update(req, res) {
        let ${uncapitalizedEntityName} = new ${entity}();

#foreach ( $attrib in $entity.attributes)
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)})
        ${uncapitalizedEntityName}.${uncapitalizedAttribName} = req.body.${uncapitalizedAttribName};
#end

        return this.${uncapitalizedEntityName}Dao.update(${uncapitalizedEntityName})
            .then(this.common.requestSuccess(res))
            .catch(this.common.serverError(res));
    };

    /**
     * Creates the given entity in the database
     * @params req, res
     * returns database insertion status
     */
    create(req, res) {
        let ${uncapitalizedEntityName} = new ${entity}();

#foreach ( $key in $entity.keyAttributes )
        if (req.body.$key.name) {
            ${uncapitalizedEntityName}.$key.name = req.body.$key.name;
        }
#end

#foreach ( $attrib in $entity.attributes )
#if ( !$entity.keyAttributes.contains($attrib) )
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)} )
 		${uncapitalizedEntityName}.${uncapitalizedAttribName} = req.body.${uncapitalizedAttribName};
#end
#end

#foreach ( $key in $entity.keyAttributes )
#if( $foreach.count > 1 ) else if (req.body.$key.name) {
            return this.${uncapitalizedEntityName}Dao.createWithId(${uncapitalizedEntityName})
                .then(this.common.requestSuccess(res))
                .catch(this.common.serverError(res));
        }#else		if (req.body.$key.name) {
            return this.${uncapitalizedEntityName}Dao.createWithId(${uncapitalizedEntityName})
                .then(this.common.requestSuccess(res))
                .catch(this.common.serverError(res));
        }#end
#end else {
            return this.${uncapitalizedEntityName}Dao.create(${uncapitalizedEntityName})
                .then(this.common.requestSuccess(res))
                .catch(this.common.serverError(res));
        }
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @params req, res
     * returns database deletion status
     */
    deleteById(req, res) {
#foreach ( $keyParam in $keyParams )
 		$keyParam
#end
        this.${uncapitalizedEntityName}Dao.deleteById(${keyAttribs})
            .then(this.common.requestSuccess(res))
            .catch(this.common.serverError(res));
    };
};