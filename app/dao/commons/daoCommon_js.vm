/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

// Load bluebird Promise
const Promise = require('bluebird');

// Load DAO Error entity
const DaoError = require('./daoError');

/**
 * DAOs Common functions
 */
module.exports = class Common {

    constructor() {
		// Load database & database configuration
        this.getDatabase = require('../../config/dbCreateTables');
    }

    findAll(sqlRequest) {
        return new Promise(function (resolve, reject) {
            this.getDatabase().all(sqlRequest, function (err, rows) {
                if (err) {
                    reject(err);
                } else {
                    resolve(rows);
                }
            });
        }.bind(this));
    }

    findOne(sqlRequest, sqlParams) {
        return new Promise(function (resolve, reject) {
            let findQuery = this.getDatabase().prepare(sqlRequest);
            findQuery.all(sqlParams, function (err, rows) {
                if (err) {
                    reject(err);
                } else if (rows === null || rows.length === 0) {
                    resolve(null);
                } else {
                    let row = rows[0];
                    resolve(row);
                }
            })
        }.bind(this));
    }

    existsOne(sqlRequest, sqlParams) {
        return new Promise(function (resolve, reject) {
            let existQuery = this.getDatabase().prepare(sqlRequest);
            existQuery.each(sqlParams, function (err, row) {
                if (err) {
                    reject(err);
                } else if (row && row.found === 1) {
                    resolve(true);
                } else {
                    reject(false);
                }
            })
        });
    }

    insert(sqlRequest, sqlParams, sqlRequest2) {
        return new Promise(function (resolve, reject) {
            let insertQuery = this.getDatabase().prepare(sqlRequest);
            let getQuery = this.getDatabase().prepare(sqlRequest2);
            
            // Error no 19 in SQLite for duplicate key in database
            let CONSTRAINT_DUPLICATE_KEY = 19;

            insertQuery.run(sqlParams, function (err) {
                if (this.changes === 1) {
                    getQuery.all({ ${DOLLAR}id: this.lastID }, function (err, rows) {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(rows[0]);
                        }
                    });
                } else {
                    if (err.errno === CONSTRAINT_DUPLICATE_KEY) {
                        resolve(false);
                    } else {
                        reject(err);
                    }
                }
            });
        }.bind(this));
    }

    update(sqlRequest, sqlParams) {
        return new Promise(function (resolve, reject) {
            let updateQuery = this.getDatabase().prepare(sqlRequest);

            updateQuery.run(sqlParams, function (err) {
                if (err) {
                    reject(err);
                } else if (this.changes === 1) {
                    resolve(true);
                } else {
                    resolve(false);
                }
            });
        }.bind(this));
    }

    save(sqlRequest, sqlRequest2, sqlRequest3, sqlParams) {
        return new Promise(function (resolve, reject) {
            let saveQuery = this.getDatabase().prepare(sqlRequest);
            let insertQuery = this.getDatabase().prepare(sqlRequest2);
            let getQuery = this.getDatabase().prepare(sqlRequest3);

            saveQuery.run(sqlParams.insertUpdate, function (err) {
                if (this.changes === 0) {
                    insertQuery.run(sqlParams.insertUpdate, function (err) {
                        if (this.changes === 1) {
                            if ('${DOLLAR}id1' in sqlParams.getInsert) {
                                // Object.assign(sqlParams.getInsert, sqlParams.getUpdate);
                                sqlParams.getInsert = sqlParams.getUpdate;
                            } else {
                                sqlParams.getInsert.${DOLLAR}id = this.lastID;
                            }
                            getQuery.all(sqlParams.getInsert, function (err, rows) {
                                if (err) {
                                    reject(err);
                                } else {
                                    let row = rows[0];
                                    resolve({
                                        body: row,
                                        newItem: true
                                    });
                                }
                            });
                        } else {
                            reject(err);
                        }
                    });
                } else if (this.changes === 1) {
                    getQuery.all(sqlParams.getUpdate, function (err, rows) {
                        if (err) {
                            reject(err);
                        } else {
                            let row = rows[0];
                            resolve({
                                body: row,
                                newItem: false
                            });
                        }
                    });
                } else {
                    reject(err);
                }
            });
        }.bind(this));
    }

    delete(sqlRequest, sqlParams) {
        return new Promise(function (resolve, reject) {
            let deleteQuery = this.getDatabase().prepare(sqlRequest);

            deleteQuery.run(sqlParams, function (err) {
                if (err) {
                    reject(err);
                } else if (this.changes === 1) {
                    resolve(true);
                } else {
                    resolve(false);
                }
            });
        }.bind(this));
    }
};