/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
## 
#set ( $sqlFindAttribs = "" )
#set ( $sqlUpdateAttribs = "" )
#set ( $sqlCreateAttribs = "" )
#set ( $modelRows = "" )
#set ( $sqlInsertValues = "" )
#set ( $sqlInsertValuesWithId = "" )
#set ( $sqlRequestAttribs = "" )
#set ( $sqlParamsAttribs = "" )
#set ( $sqlRequest2CreateAttribs = "" )
#set ( $sqlPrimaryKeyParams = "" )
##
#foreach( $attrib in $entity.attributes )
#if ( $foreach.count > 1 )
#set ( $sqlFindAttribs = $sqlFindAttribs + ", " )
#end
#set ( $sqlFindAttribs = $sqlFindAttribs + ${fn.uncapitalize($attrib.name)} )
#end
##
#foreach( $attrib in $entity.attributes )
#if ( !$entity.keyAttributes.contains($attrib) )
#if ( !$sqlUpdateAttribs.equals("") )
#set ( $sqlUpdateAttribs = $sqlUpdateAttribs + ", " )
#end
#set ( $sqlUpdateAttribs = $sqlUpdateAttribs + ${fn.uncapitalize($attrib.name)} )
#set ( $sqlUpdateAttribs = $sqlUpdateAttribs + "=${DOLLAR}${fn.uncapitalize($attrib.name)}" )
#end
#end
##
#foreach( $attrib in $entity.attributes )
#if ( !$entity.keyAttributes.contains($attrib) )
#if ( !$sqlCreateAttribs.equals("") )
#set ( $sqlCreateAttribs = $sqlCreateAttribs + ", " )
#end
#set ( $sqlCreateAttribs = $sqlCreateAttribs + ${fn.uncapitalize($attrib.name)} )
#end
#end
##
#foreach( $attrib in $entity.attributes )
#if( $foreach.count > 1 )
#set ( $modelRows = $modelRows + ", " )
#end
#set ( $modelRows = $modelRows + "row." )
#set ( $modelRows = $modelRows + ${fn.uncapitalize($attrib.name)} )
#end
##
#set ( $insertCpt = 0 )
#foreach( $attrib in $entity.attributes )
#if ( !$entity.keyAttributes.contains($attrib) )
#set ( $insertCpt = $insertCpt +1 )
#if ( $insertCpt > 1 )
#set ( $sqlInsertValues = $sqlInsertValues + ", " )
#end
#set ( $sqlInsertValues = $sqlInsertValues + ${DOLLAR}+${fn.uncapitalize($attrib.name)} )
#end
#end
##
#foreach( $attrib in $entity.attributes )
#if ( $foreach.count > 1 )
#set ( $sqlInsertValuesWithId = $sqlInsertValuesWithId + ", " )
#end
#set ( $sqlInsertValuesWithId = $sqlInsertValuesWithId + ${DOLLAR}+${fn.uncapitalize($attrib.name)} )
#end
##
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $sqlRequestAttribs = $sqlRequestAttribs + " AND " )
#end
#set ( $sqlRequestAttribs = $sqlRequestAttribs + ${fn.uncapitalize($key.name)} )
#set ( $sqlRequestAttribs = $sqlRequestAttribs + "=${DOLLAR}${fn.uncapitalize($key.name)}" )
#end
##
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $sqlParamsAttribs = $sqlParamsAttribs + ",
			" )
#end
#set ( $sqlParamsAttribs = $sqlParamsAttribs + "${DOLLAR}${fn.uncapitalize($key.name)}: ${fn.uncapitalize($key.name)}" )
#end
##
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $sqlRequest2CreateAttribs = $sqlRequest2CreateAttribs + " AND " )
#end
#set ( $sqlRequest2CreateAttribs = $sqlRequest2CreateAttribs + ${fn.uncapitalize($key.name)} )
#set ( $sqlRequest2CreateAttribs = $sqlRequest2CreateAttribs + "=${DOLLAR}id" )
#end
##
#foreach ( $key in $entity.keyAttributes)
#set ( $uncapitalizedKeyName = ${fn.uncapitalize($key.name)})
#if ($foreach.count < $entity.keyAttributes.size())
#set ( $sqlPrimaryKeyParams = $sqlPrimaryKeyParams + "${DOLLAR}${uncapitalizedKeyName} : ${entity}.${uncapitalizedKeyName}, 
            ")
#else
#set ( $sqlPrimaryKeyParams = $sqlPrimaryKeyParams + "${DOLLAR}${uncapitalizedKeyName} : ${entity}.${uncapitalizedKeyName}")
#end
#end

// Load $entity entity
const $entity = require('../model/$uncapitalizedEntityName');

// Load DAO Common functions
const DaoCommon = require('./commons/daoCommon');

/**
 * DAO of entity ${entity}
 */
module.exports = class ${entity}Dao {

    constructor() {
        this.genericDao = new DaoCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @params $fn.argumentsList($entity.keyAttributes)
     * @return entity
     */
    findById($fn.argumentsList($entity.keyAttributes)) {
       let sqlRequest = "SELECT $sqlFindAttribs FROM $uncapitalizedEntityName WHERE $sqlRequestAttribs";

       let sqlParams = {
			$sqlParamsAttribs
		};
        return this.genericDao.findOne(sqlRequest, sqlParams)
            .then(row => {
                if(row) {
                    return new ${entity}($modelRows);
                } else {
                    return false;
                }
            })
    };

    /**
     * Finds all entities.
     * @return all entities
     */
    findAll() {
        let sqlRequest = "SELECT * FROM $uncapitalizedEntityName";
        return this.genericDao.findAll(sqlRequest).then(rows => {
            let ${uncapitalizedEntityName}s = [];
            if (rows) {
                for (const row of rows) {
                    ${uncapitalizedEntityName}s.push(new ${entity}($modelRows));
                }
            }
            return ${uncapitalizedEntityName}s;
        });
    };

    /**
     * Counts all the records present in the database
     * @return count
     */
    countAll() {
        let sqlRequest = "SELECT COUNT(*) AS count FROM $uncapitalizedEntityName";
        return this.genericDao.findOne(sqlRequest);
    };

    /**
     * Updates the given entity in the database
     * @params $entity
     * @return true if the entity has been updated, false if not found and not updated
     */
    update($entity) {
        let sqlRequest = "UPDATE $uncapitalizedEntityName SET $sqlUpdateAttribs WHERE $sqlRequestAttribs";
       
        let sqlParams = {
#foreach ( $attrib in $entity.attributes)
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)})
 			${DOLLAR}${uncapitalizedAttribName}: ${entity}.${uncapitalizedAttribName},
#end
        };
        return this.genericDao.update(sqlRequest, sqlParams);
    };

    /**
     * Save the given entity in the database in case it exist, else create a new one
     * @params $entity
     * @return the updated or created entity
     */
    save($entity) {
        let saveQuery = "UPDATE $uncapitalizedEntityName SET $sqlUpdateAttribs WHERE $sqlRequestAttribs";
        let insertQuery = 
            "INSERT into $uncapitalizedEntityName "
#set ( $entityWithPoint = $entity.name + '.' )
            + (($entity.keyAttributesNamesAsString(' && ', $entityWithPoint, '')) ? "($sqlFindAttribs)" : "($sqlCreateAttribs)")
            + " VALUES "
            + (($entity.keyAttributesNamesAsString(' && ', $entityWithPoint, '')) ? "($sqlInsertValuesWithId)" : "($sqlInsertValues)");
#set ( $queryGetId = "" )
#set ( $getInsert = "" )
#set ( $getUpdate = "" )
#if( $entity.hasCompositePrimaryKey() )
#foreach ( $key in $entity.keyAttributes )
#if ($foreach.count < $entity.keyAttributes.size())
#set ( $queryGetId = $queryGetId + "${key.name}=${DOLLAR}id${foreach.count}, " )
#set ( $getInsert = $getInsert + "${DOLLAR}id${foreach.count}: '',
				" )
#set ( $getUpdate = $getUpdate + "${DOLLAR}id${foreach.count}: ${entity.name}.${key.name},
				" )
#else
#set ( $queryGetId = $queryGetId + "${key.name}=${DOLLAR}id${foreach.count}" )
#set ( $getInsert = $getInsert + "${DOLLAR}id${foreach.count}: ''" )
#set ( $getUpdate = $getUpdate + "${DOLLAR}id${foreach.count}: ${entity.name}.${key.name}" )
#end
#end
#else
#set ( $queryGetId = "${entity.keyAttribute.name}=${DOLLAR}id" )
#set ( $getInsert = "${DOLLAR}id: ''" )
#set ( $getUpdate = "${DOLLAR}id: ${entity.name}.${entity.keyAttribute.name}" )
#end

        let getQuery = "SELECT $sqlFindAttribs FROM $uncapitalizedEntityName WHERE $queryGetId";

        let sqlParams = {
            insertUpdate: {},
            getInsert : {
                $getInsert
            },
            getUpdate : {
                $getUpdate
            }
		};
#set ($entityParamsAssign = "")
#foreach ( $attrib in $entity.attributes)
#if ($foreach.count < $entity.attributes.size())
#if ( $attrib.isKeyElement() )
#set ($entityParamsAssign = $entityParamsAssign + "${entity.name}.${attrib.name} && { ${DOLLAR}${attrib.name}: ${entity.name}.${attrib.name} },
            ")
#else
#set ($entityParamsAssign = $entityParamsAssign + "{ ${DOLLAR}${attrib.name}: ${entity.name}.${attrib.name} },
            ")
#end
#else
#if ( $attrib.isKeyElement() )
#set ($entityParamsAssign = $entityParamsAssign + "${entity.name}.${attrib.name} && { ${DOLLAR}${attrib.name}: ${entity.name}.${attrib.name} }")
#else
#set ($entityParamsAssign = $entityParamsAssign + "{ ${DOLLAR}${attrib.name}: ${entity.name}.${attrib.name} }")
#end
#end
#end
        Object.assign(sqlParams.insertUpdate,
            ${entityParamsAssign});

        return this.genericDao.save(saveQuery, insertQuery, getQuery, sqlParams);
    };

    /**
     * Creates the given entity in the database
     * @params $entity
     * returns database insertion status
     */
    create($entity) {
        let sqlRequest =
            "INSERT into $uncapitalizedEntityName "
            + (($entity.keyAttributesNamesAsString(' && ', $entityWithPoint, '')) ? "($sqlFindAttribs)" : "($sqlCreateAttribs)")
            + " VALUES "
            + (($entity.keyAttributesNamesAsString(' && ', $entityWithPoint, '')) ? "($sqlInsertValuesWithId)" : "($sqlInsertValues)");
        let sqlRequest2 = "SELECT $sqlFindAttribs FROM $uncapitalizedEntityName WHERE $sqlRequest2CreateAttribs";
        let sqlParams = {};

        Object.assign(sqlParams,
            ${entityParamsAssign});

        return this.genericDao.insert(sqlRequest, sqlParams, sqlRequest2);
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @params $fn.argumentsList($entity.keyAttributes)
     * returns database deletion status
     */
    deleteById($fn.argumentsList($entity.keyAttributes)) {
		let sqlRequest = "DELETE FROM $uncapitalizedEntityName WHERE $sqlRequestAttribs";
		let sqlParams = {
			$sqlParamsAttribs
		};
        return this.genericDao.delete(sqlRequest, sqlParams);
    };

    /**
     * Deletes an entity using the entity
     * @params $entity
     * returns database deletion status
     */
    delete($entity) {
        let sqlRequest = "DELETE FROM $uncapitalizedEntityName WHERE $sqlRequestAttribs";
        let sqlParams = {
 			$sqlPrimaryKeyParams
        };
        return this.genericDao.delete(sqlRequest, sqlParams);
    };

    /**
     * Returns true if an entity exists with the given Id / Primary Key
     * @params $fn.argumentsList($entity.keyAttributes)
     * returns database entry existence status (true/false)
     */
    existsById($fn.argumentsList($entity.keyAttributes)) {
        let sqlRequest = "SELECT (count(*) > 0) as found FROM $uncapitalizedEntityName WHERE $sqlRequestAttribs";
		let sqlParams = {
			$sqlParamsAttribs
		};
        return this.genericDao.existsOne(sqlRequest, sqlParams);
    };

    /**
     * Returns true if an entity exists using the entity
     * @params $entity
     * returns database entry existence status (true/false)
     */
    exists($entity) {
        let sqlRequest = "SELECT (count(*) > 0) as found FROM $uncapitalizedEntityName WHERE $sqlRequestAttribs";
        let sqlParams = {
            $sqlPrimaryKeyParams
        };
        return this.genericDao.existsOne(sqlRequest, sqlParams);
    };
};